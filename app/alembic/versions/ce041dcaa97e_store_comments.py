"""store comments

Revision ID: ce041dcaa97e
Revises: b4e462d67183
Create Date: 2023-06-08 08:21:40.447162

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "ce041dcaa97e"
down_revision = "b4e462d67183"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "store",
        "locale",
        existing_type=postgresql.ENUM("en_US", "it_IT", name="locale"),
        comment="If the store uses , as decimal separator choose it_IT",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "search_url",
        existing_type=sa.VARCHAR(),
        comment="The base url of the search page, like website.com/search?q=",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "search_tag",
        existing_type=sa.VARCHAR(),
        comment="The nearest HTML tag for each product item displayed in the result page",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "search_class",
        existing_type=sa.VARCHAR(),
        comment="The nearest CSS class for the search_tag",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "search_link",
        existing_type=sa.VARCHAR(),
        comment="The nearest CSS class from where to search the product page link",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "search_next_page",
        existing_type=sa.VARCHAR(),
        comment="The nearest CSS class from where to get the next page link",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "search_page_param",
        existing_type=sa.VARCHAR(),
        comment="The query param used in alternative to the next page link",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_name_class",
        existing_type=sa.VARCHAR(),
        comment="CSS class/id for the product's name",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "product_name_tag",
        existing_type=sa.VARCHAR(),
        comment="HTML tag for the product's name",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "product_price_class",
        existing_type=sa.VARCHAR(),
        comment="CSS class/id for the product's price",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "product_price_tag",
        existing_type=sa.VARCHAR(),
        comment="HTML tag for the product's price",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "product_image_class",
        existing_type=sa.VARCHAR(),
        comment="CSS class/id for the product's image URL",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_image_tag",
        existing_type=sa.VARCHAR(),
        comment="HTML tag for the main image of the product, usually img",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_is_available_class",
        existing_type=sa.VARCHAR(),
        comment="CSS class/id to know if the product is available",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_is_available_tag",
        existing_type=sa.VARCHAR(),
        comment="HTML tag to know if the product is available",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_is_available_match",
        existing_type=sa.VARCHAR(),
        comment="Regex to match if the product is in stock",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_variations_class",
        existing_type=sa.VARCHAR(),
        comment="CSS class/id to know if the product has variations",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_variations_tag",
        existing_type=sa.VARCHAR(),
        comment="HTML tag to know if the product has variations",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_description_class",
        existing_type=sa.VARCHAR(),
        comment="CSS class/id for the product's description",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_description_tag",
        existing_type=sa.VARCHAR(),
        comment="HTML tag for the product description",
        existing_nullable=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "store",
        "product_description_tag",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="HTML tag for the product description",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_description_class",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="CSS class/id for the product's description",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_variations_tag",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="HTML tag to know if the product has variations",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_variations_class",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="CSS class/id to know if the product has variations",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_is_available_match",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Regex to match if the product is in stock",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_is_available_tag",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="HTML tag to know if the product is available",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_is_available_class",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="CSS class/id to know if the product is available",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_image_tag",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="HTML tag for the main image of the product, usually img",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_image_class",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="CSS class/id for the product's image URL",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "product_price_tag",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="HTML tag for the product's price",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "product_price_class",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="CSS class/id for the product's price",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "product_name_tag",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="HTML tag for the product's name",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "product_name_class",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="CSS class/id for the product's name",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "search_page_param",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="The query param used in alternative to the next page link",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "search_next_page",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="The nearest CSS class from where to get the next page link",
        existing_nullable=True,
    )
    op.alter_column(
        "store",
        "search_link",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="The nearest CSS class from where to search the product page link",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "search_class",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="The nearest CSS class for the search_tag",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "search_tag",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="The nearest HTML tag for each product item displayed in the result page",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "search_url",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="The base url of the search page, like website.com/search?q=",
        existing_nullable=False,
    )
    op.alter_column(
        "store",
        "locale",
        existing_type=postgresql.ENUM("en_US", "it_IT", name="locale"),
        comment=None,
        existing_comment="If the store uses , as decimal separator choose it_IT",
        existing_nullable=True,
    )
    # ### end Alembic commands ###
